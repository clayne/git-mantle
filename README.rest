.. vim: ft=rst sts=2 sw=2 tw=77

.. :Author: Roman Neuhauser
.. :Contact: neuhauser+git-mantle@sigpipe.cz
.. :Copyright: This document is in the public domain.

.. this file is marked up using reStructuredText
   lines beginning with ".." are reST directives
   "foo_" or "`foo bar`_" is a link, defined at ".. _foo" or ".. _foo bar"
   "::" introduces a literal block (usually some form of code)
   "`foo`" is some kind of identifier
   suspicious backslashes in the text ("`std::string`\s") are required for
   reST to recognize the preceding character as syntax

.. default-role:: strong
.. parsed-literal::

  `NAME`
       `git-mantle` â€” Generate an overview of changes on a branch


  `SYNOPSIS`
       `git-mantle` -h | --help
       `git-mantle` [--output FILE] [diffstat-opts] [[BASE] HEAD]


  `DESCRIPTION`
     Generate an overview of changes on a branch.  The output summarizes
     changes from `BASE` to `HEAD` and suggests where to pull them from.

     `BASE`
        "Refname" to start from.  It can be a remote-tracking branch, like
        "upstream/stable", or a local branch name if it's prefixed with
        "./", or a remote name, in which case its default branch is used.
        If `BASE` is omitted, the value of `mantle.upstream` is used.

     `HEAD`
        "Refname" for the top-most commit included in the request.  It can
        be a remote tracking branch, like "rn/feature", or a local branch
        name if it's prefixed with "./", or a bare branch name which is
        then qualified with the value of `mantle.public`.  If `HEAD` is "HEAD"
        it's resolved to a branch name and qualified with the value of
        mantle.public.  If `HEAD` is omitted it's treated as if it was
        "HEAD".

  `CONFIGURATION`
     `mantle.upstream`
        Default `BASE`.  Defaults to "upstream".

     `mantle.public`
        Default remote to qualify `HEAD`.  Defaults to "origin".

     `remote.${mantle.public}.url`
        URL used in the output to suggest pulling from.

  `ENVIRONMENT`
       `git-mantle` is implemented in terms of third-party commands which
       use environment variables.  This means `git-mantle` may be influenced
       by environment variables used by *git(1)*, *zsh(1)*, possibly others.

  `EXAMPLES`
       These example assume a repository with these settings in place:

       % git remote add -m master upstream ...
       % git remote add -m master rn ...
       % git config mantle.upstream upstream
       % git config mantle.public rn

       % git mantle upstream/master rn/feature
          Summarize the changes from upstream/master to rn/feature, offering
          them for pull from remote.rn.url.

       % git mantle upstream rn/feature
          Summarize the changes from upstream/HEAD to rn/feature, offering
          them for pull from remote.rn.url.

       % git mantle rn/feature
          Summarize the changes from mantle.upstream to rn/feature, offering
          them for pull from remote.rn.url.

       % git mantle
          Summarize the changes from mantle.upstream to the head of a branch
          in mantle.public, offering them for pull from remote.<name>.url
          where <name> is derived from mantle.public.  The branch name is
          derived from the active branch: if the active branch has an
          upstream branch configured (in mantle.public ), that branch is
          used.  If there's no upstream branch configured, a branch eponymous
          with the active branch is used.

  `DIAGNOSTICS`
       The `git-mantle` utility exits 0 on success, and >0 if an error occurs.

  `SEE ALSO`
       *git-request-pull(1)*.

  `LICENSE`
       MIT
           https://github.com/roman-neuhauser/git-pimp/blob/master/LICENSE

  `AUTHORS`
       Roman Neuhauser <neuhauser+git-mantle@sigpipe.cz>
           https://github.com/roman-neuhauser/git-mantle/

  `BUGS`
       No doubt plentiful.  Please report them at
           https://github.com/roman-neuhauser/git-mantle/issues

